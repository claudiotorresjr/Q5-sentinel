#!/usr/bin/env python3
"""
Sistema de Prioriza√ß√£o de Vulnerabilidades usando RPI (Risk-Priority Index)
Metodologia das 5 Perguntas (5Q) para reduzir 15000+ vulnerabilidades at√© a primeira a atacar

Script principal que coordena os c√°lculos Q1-Q5

Autor: Security Analytics Team
Data: 2025
Vers√£o: 5.0 - Modular
"""

import json
import sys
import os
import logging
from typing import Dict, List, Tuple, Optional
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import argparse
from torch import frac

# Importa√ß√µes dos m√≥dulos criados
from models import VulnerabilityMetrics, ProcessingConfig
from calculators import RiskPriorityCalculator, TieBreaker
from prioritizer import VulnerabilityPrioritizer
from utils import load_vulnerability_data, find_vulnerability_file, print_banner, print_statistics
#from pareto import print_concentration_report
from models import ProcessingConfig
from prioritizer import VulnerabilityPrioritizer
from utils import load_vulnerability_data, print_statistics

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def _get_arg_val(argv, flag, default=None, cast=str):
    if flag in argv:
        i = argv.index(flag)
        if i+1 < len(argv) and not argv[i+1].startswith('-'):
            try:
                return cast(argv[i+1])
            except Exception:
                return default
    return default

# Configura√ß√£o de logging

def main():
    """Fun√ß√£o principal para executar o sistema de prioriza√ß√£o"""
    # Banner inicial
    print_banner("üõ°Ô∏è  SISTEMA DE PRIORIZA√á√ÉO DE VULNERABILIDADES - RPI v5.0")
    print("   üìä Metodologia das 5 Perguntas (5Q)")

    parser = argparse.ArgumentParser(description="Sistema de Prioriza√ß√£o de Vulnerabilidades")
    parser.add_argument('--inputs', nargs='+', help='Arquivos JSON de vulnerabilidades')
    parser.add_argument('--no-progress', action='store_true', help='Desabilitar barras de progresso')
    parser.add_argument('--top-k', type=int, default=1000, help='Top K for funnel')
    parser.add_argument('--funnel-threshold', type=int, default=50)
    parser.add_argument('--funnel-eps', type=float, default=1e-4)
    parser.add_argument('--no-funnel', action='store_true')
    parser.add_argument('filename', nargs='?', help='Arquivo JSON de vulnerabilidades (opcional)')
    args = parser.parse_args()

    enable_progress = not args.no_progress
    if not enable_progress:
        print("‚ÑπÔ∏è  Barras de progresso desabilitadas")

    config = ProcessingConfig(enable_progress_bars=enable_progress)
    config.top_k_for_funnel = args.top_k
    config.funnel_threshold = args.funnel_threshold
    config.funnel_equal_epsilon = args.funnel_eps
    config.funnel_enabled = not args.no_funnel

    # Carrega dados de vulnerabilidades
    if args.inputs:
        vulnerabilities = []
        for filename in args.inputs:
            vulns = load_vulnerability_data(filename, enable_progress)
            if vulns:
                vulnerabilities.extend(vulns)
    elif args.filename:
        vulnerabilities = load_vulnerability_data(args.filename, enable_progress)
    else:
        filename = find_vulnerability_file()
        if filename:
            vulnerabilities = load_vulnerability_data(filename, enable_progress)
        else:
            logger.error("‚ùå Nenhum arquivo de vulnerabilidades encontrado!")
            print("Uso: python main.py [--inputs file1.json file2.json] [arquivo.json] [--no-progress]")
            return []

    if not vulnerabilities:
        logger.error("‚ùå Nenhuma vulnerabilidade para processar!")
        return []

    # Estat√≠sticas iniciais
    print_statistics(vulnerabilities, "DADOS CARREGADOS")

    # Inicializa o priorizador
    prioritizer = VulnerabilityPrioritizer(config)

    # Processa vulnerabilidades
    prioritized = prioritizer.process_vulnerabilities(vulnerabilities)
    k, share, frac = VulnerabilityPrioritizer.pareto_cut(prioritized, 0.80)
    #print_concentration_report(prioritized)


    if not prioritized:
        logger.error("‚ùå Nenhuma vulnerabilidade foi priorizada com sucesso!")
        return []

    # Gera relat√≥rio detalhado para top 20
    print_banner("üìã GERANDO RELAT√ìRIO")
    report = prioritizer.generate_report(prioritized, top_n=config.top_n_report)
    print(report)

    # Exporta TODOS os resultados para CSV
    if config.export_csv:
        prioritizer.export_to_csv(prioritized, "src/vulnerability_priorities.csv")

    # Mostra resumo das top 5 mais cr√≠ticas com visual melhorado
    print_banner("üéØ TOP 5 VULNERABILIDADES CR√çTICAS PARA A√á√ÉO IMEDIATA")

    for i, vuln in enumerate(prioritized[:5], 1):
        metrics = vuln.get('rpi_metrics', VulnerabilityMetrics())

        # Box visual para cada vulnerabilidade
        print(f"\n‚îå{'‚îÄ'*76}‚îê")
        print(f"‚îÇ #{i}. RPI: {vuln.get('rpi_score', 0):>5.1f} ‚îÇ {vuln.get('title', 'Sem t√≠tulo')[:63]:<63} ‚îÇ")
        print(f"‚îú{'‚îÄ'*76}‚î§")

        # Informa√ß√µes principais
        cve = vuln.get('vulnerability_ids', 'N/A')
        component = vuln.get('component_name', 'N/A')
        version = vuln.get('component_version', 'N/A')
        print(f"‚îÇ CVE: {cve:<25} Componente: {component} v{version}")

        # Scores das 5 perguntas em formato visual
        print(f"‚îÇ 5Q Scores: Q1={metrics.q1_exploitability:>4.0f} Q2={metrics.q2_exposure:>4.0f} Q3={metrics.q3_impact:>4.0f} Q4={metrics.q4_fixability:>4.0f} Q5={metrics.q5_urgency:>4.0f}")

        # Indicadores cr√≠ticos com √≠cones
        critical_indicators = []
        if metrics.has_kev:
            critical_indicators.append("üî¥ KEV")
        if metrics.has_poc:
            critical_indicators.append("‚ö†Ô∏è  PoC")
        if vuln.get('violates_sla'):
            critical_indicators.append("‚è∞ SLA!")
        if metrics.epss_score > 0.5:
            critical_indicators.append(f"üìä EPSS:{metrics.epss_score:.0%}")

        if critical_indicators:
            indicators_str = ' '.join(critical_indicators)
            print(f"‚îÇ Alertas: {indicators_str}")

        # A√ß√£o recomendada
        mitigation = vuln.get('mitigation', '')
        if mitigation and str(mitigation) != 'NaN':
            mit_clean = str(mitigation).replace('NEWLINE', ' ').strip()[:65]
            print(f"‚îÇ ‚úÖ A√ß√£o: {mit_clean}")

        print(f"‚îî{'‚îÄ'*76}‚îò")

    # Resumo final
    print_banner("üìä RESUMO DA AN√ÅLISE")
    print(f"üìÅ Relat√≥rio completo: vulnerability_priorities.csv")
    print(f"üìä Total analisado: {len(prioritized)} vulnerabilidades √∫nicas")

    # Estat√≠sticas por dom√≠nio
    domain_stats = {}
    for vuln in prioritized:
        domain = vuln.get('domain', 'general')
        if domain not in domain_stats:
            domain_stats[domain] = {'count': 0, 'total_rpi': 0}
        domain_stats[domain]['count'] += 1
        domain_stats[domain]['total_rpi'] += vuln.get('rpi_score', 0)

    print(f"\nüè¢ Distribui√ß√£o por dom√≠nio:")
    for domain, stats in sorted(domain_stats.items(), key=lambda x: x[1]['count'], reverse=True)[:5]:
        avg_rpi = stats['total_rpi'] / stats['count'] if stats['count'] > 0 else 0
        print(f"   {domain}: {stats['count']} vulns (RPI m√©dio: {avg_rpi:.1f})")

    # Indicadores de risco
    kev_count = sum(1 for v in prioritized if v.get('rpi_metrics', VulnerabilityMetrics()).has_kev)
    poc_count = sum(1 for v in prioritized if v.get('rpi_metrics', VulnerabilityMetrics()).has_poc)
    sla_violations = sum(1 for v in prioritized if v.get('violates_sla'))

    print(f"\n‚ö†Ô∏è  Indicadores de risco:")
    print(f"   Com KEV (explora√ß√£o ativa): {kev_count}")
    print(f"   Com PoC dispon√≠vel: {poc_count}")
    print(f"   SLA violado: {sla_violations}")

    print("\n‚ú® An√°lise completa! Use os resultados para priorizar remedia√ß√£o.")
    print("="*80 + "\n")

    return prioritized


if __name__ == "__main__":
    # Uso: python main.py [arquivo.json] [--no-progress]
    # Se n√£o especificar arquivo, procura por vulnerabilities.json, data.json, ou vulns.json
    # Use --no-progress para desabilitar barras de progresso

    main()
